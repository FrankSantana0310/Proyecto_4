{"version":3,"sources":["components/Form.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Form","getCita","initialState","mascota","propietario","fecha","time","sintomas","useState","cita","setCita","handleChange","e","target","name","value","onSubmit","preventDefault","nuevaCita","uuid","htmlFor","onChange","className","type","placeholder","id","Cita","deleteCita","style","display","justifyContent","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","newCita","filter","element","titulo","length","marginBottom","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.473dba75.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport uuid from 'uuid';\r\n\r\n\r\nconst Form = ({getCita}) => {\r\nconst initialState = {\r\n    mascota: \"\",\r\n    propietario: \"\",\r\n    fecha: \"\",\r\n    time: \"\",\r\n    sintomas: \"\",\r\n    \r\n  }\r\n\r\n  const [cita, setCita] = useState(initialState);\r\n\r\n  const handleChange = (e) => {\r\n      setCita({\r\n          ...cita,\r\n          [e.target.name]:e.target.value,\r\n      })\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n        const nuevaCita = {...cita}\r\n        nuevaCita['id'] = uuid();\r\n        setCita(nuevaCita)\r\n        getCita(nuevaCita);\r\n        setCita(initialState)\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"mascota\">Nombre Mascota</label>\r\n        <input\r\n          onChange={handleChange}\r\n          className=\"u-full-width\"\r\n          type=\"text\"\r\n          placeholder=\"Nombre\"\r\n          id=\"mascota\"\r\n          name=\"mascota\"\r\n          value={cita.mascota}\r\n        />\r\n        <label htmlFor=\"propietario\">Nombre Propietario</label>\r\n        <input\r\n          onChange={handleChange}\r\n          className=\"u-full-width\"\r\n          type=\"text\"\r\n          placeholder=\"Propietario\"\r\n          id=\"propietario\"\r\n          name=\"propietario\"\r\n          value={cita.propietario}\r\n        />\r\n        <label htmlFor=\"fecha\">Fecha</label>\r\n        <input\r\n          onChange={handleChange}\r\n          type=\"date\"\r\n          className=\"u-full-width\"\r\n          name=\"fecha\"\r\n          id=\"fecha\"\r\n          value={cita.fecha}\r\n        />\r\n        <label htmlFor=\"time\">Hora</label>\r\n        <input onChange={handleChange} type=\"time\" className=\"u-full-width\" name=\"time\" id=\"time\"  value={cita.time} />\r\n        <label htmlFor=\"sintomas\">Sintomas</label>\r\n        <textarea\r\n          onChange={handleChange}\r\n          className=\"u-full-width\"\r\n          name=\"sintomas\"\r\n          id=\"sintomas\"\r\n          value={cita.sintomas}\r\n        ></textarea>\r\n        <input\r\n          type=\"submit\"\r\n          className=\"button-primary u-full-width\"\r\n          value=\"Agregar\"\r\n        />\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes = {};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({ cita, deleteCita }) => {\r\n  return (\r\n    <div className=\"cita\">\r\n      <div style={{display:'flex', justifyContent: 'space-between'}}>\r\n        <div>\r\n          <p>\r\n            Mascota:<span>{cita.mascota}</span>\r\n          </p>\r\n          <p>\r\n            Propietario:<span>{cita.propietario}</span>\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <p>\r\n            Fecha:<span>{cita.fecha}</span>\r\n          </p>\r\n          <p>\r\n            Hora:<span>{cita.time}</span>\r\n          </p>\r\n          \r\n        </div>\r\n        \r\n      </div>\r\n      <p>\r\n            Sintomas:<span>{cita.sintomas}</span>\r\n          </p>\r\n      <button\r\n        className=\"button eliminar u-full-width\"\r\n        onClick={() => {\r\n          deleteCita(cita.id);\r\n        }}\r\n      >\r\n        Eliminar X\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCita.propTypes = {};\r\n\r\nexport default Cita;\r\n","import React, {useState, useEffect,Fragment} from 'react';\n\nimport './App.css';\nimport Form from './components/Form';\nimport Cita from './components/Cita';\n\n\n\nfunction App() {\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  const [citas, setCitas] = useState(citasIniciales || []);\n\n  useEffect(() => {\n     \n     localStorage.setItem('citas', JSON.stringify(citas));\n    \n  },[citas])\n\n  const getCita = (cita) => {\n    setCitas(\n      [...citas,cita]\n    )\n   \n  }\n\n  const deleteCita = (id) => {\n      let newCita = citas.filter((element) => (\n        element.id !== id\n      )) \n      setCitas(newCita);\n  }\n  \n  const titulo = citas.length >0 ? 'Citas existentes': 'Intoducir nueva cita' ;\n  return (\n\n    \n   \n    <Fragment>\n    <h1>Administrador de Pacientes </h1>\n    <div className='container'>\n      <div className='row'>\n          <div className='one-half column '>\n              <Form getCita={getCita}/>\n          </div>\n         \n          <div className='one-half column '>\n          <h2 style={{marginBottom: '48px'}}>{titulo}</h2>\n            { citas.map((cita,index) => (\n              <Cita\n              deleteCita={deleteCita}\n              key={cita.id}\n               cita={cita}\n               index={index}/>\n            ))}\n          </div>\n      </div>\n    </div>\n    </Fragment>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}